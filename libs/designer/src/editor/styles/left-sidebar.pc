import "./common.pc" as common
import "./theme.pc" as theme

component Tabs {
  render div {
    style {
      display: flex
    }
    slot children
  }
}

component Tab {
  variant selected trigger { ".selected" }
  render div(class: class) {
    style {
      font-weight: 600
      padding: var(theme.space05)
      display: inline-block
      flex: 1
      text-align: center
      border-bottom: 1px solid var(theme.borderColor)
    }
    style variant selected {
      border-color: var(theme.backgroundSelected)

    }
    slot children
  }
}

public component LeftSidebar {
  render common.Sidebar {    
    common.SidebarPanel {
      LeftSidebarHeader
      common.SidebarSection {
        Layers
      }
    }
     
  }
}

component LeftSidebarHeader {
  render div {
    style {
      display: flex
      padding: var(theme.space05) var(theme.space05)
      justify-content: space-between
      font-size: var(theme.fontSize01)
      align-items: center
      font-weight: 600
    }
    div {
      style {
        display: flex
        gap: var(theme.space02)
      }
      div {
        style extends theme.icon {
          -webkit-mask-image: url("./back.svg")
          --size: 1.2em
        }
      }
      span {
        text "TodoList.pc"
      }
    }
    div {
      style extends theme.icon {
        cursor: pointer
        -webkit-mask-image: url("./hamburger.svg")
        --size: 1.2em
      }
    }
  }
}


component LayerIcon {
  variant isComponent trigger { ".component" }
  variant isSlot trigger { ".slot" }
  variant isText trigger { ".text" }
  render div(class:class) {
    style {
      --size: 1.2em
      width: 14px
    }
    style variant isComponent extends theme.icon {
      -webkit-mask-image: url("./component2.svg")
    }
    style variant isSlot extends theme.icon {
      -webkit-mask-image: url("./slot2.svg")
    }
    style variant isText extends theme.icon {
      --size: 0.6em
      -webkit-mask-image: url("./text.svg")
    }
  }
}

component TreeNavigationItemContent {
  render div {
    slot children
  }
}

component TreeNavigationItem {
  variant isSelected
  render div {
    style variant isSelected {
      background: var(theme.backgroundSelectedLight)
    }
    slot children
  }
}


component TreeNavigationItemHeader {
  variant isContainer trigger { ".container" }
  variant isOpen trigger { ".open" }
  render div root(class:class) {
    style {
      --depth: 1
      display: flex
      gap: var(theme.space02)
      padding: var(theme.space03) var(theme.space02)
      padding-left: calc(22px * var(--depth))

    }
    div {
      style {
        position: relative
        display: flex
        gap: var(theme.space03)
        align-items: center
      }
      div {
        style extends theme.icon {
          -webkit-mask-image: url("./chevron2.svg")
          opacity: 0
          color: white
          --size: 14px
          position: absolute
          left: -18px

        }
        style variant isContainer {
          opacity: 0.3
        }
        style variant isOpen {
          transform: rotate(90deg)
        }
      }
      
      slot children
    }
  }
}

component FileNavigatorItemHeader {
  variant isSlot trigger { ".slot" }
  variant isComponent trigger { ".component" }
  render TreeNavigationItemHeader container(class: class) {
    override root {
      style {
        --depth: 1
      }
      style variant isComponent {
        color: var(theme.componentColor)
      }
      style variant isSlot {
        color: var(theme.slotColor)
      }
    }
    LayerIcon(class:class)
    slot children
  }
}

component Layers {
  render div {
    style {
      padding: var(theme.space02) 0px
    }
    TreeNavigationItem {
      FileNavigatorItemHeader(class: "component container open") {       
        override container.root {
          style {
            --depth: 1
          }
        }
        text "Item"
      }
      TreeNavigationItemContent {
        TreeNavigationItem {
          FileNavigatorItemHeader(class: "slot container open") {
            override container.root {
              style {
                --depth: 2
              }
            }
            text "label"
          }
          TreeNavigationItemContent {
            TreeNavigationItem {
              FileNavigatorItemHeader(class: "text") {
                override container.root {
                  style {
                    --depth: 3
                  }
                }
                text "some label"
              }
            }
        }
        TreeNavigationItem(class: "selected") {
          FileNavigatorItemHeader(class: "slot container open") {
            override container.root {
              style {
                --depth: 2
              }
            }
            text "description"
          }
          TreeNavigationItemContent {
            TreeNavigationItem {
              FileNavigatorItemHeader(class: "text") {
                override container.root {
                  style {
                    --depth: 3
                  }
                }
                text "some long description"
              }
            }
          }
        }
      }
    }
  }
}
