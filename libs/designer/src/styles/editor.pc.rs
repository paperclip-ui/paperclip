/**
 * !! This file is AUTO GENERATED by the Paperclip Yew compiler.
 */

use yew::prelude::*;
use yew::{function_component, Children, html, Properties, Callback, MouseEvent};

#[path = "theme.pc.rs"]
mod theme;

#[path = "left-sidebar.pc.rs"]
mod leftSidebar;

#[path = "right-sidebar.pc.rs"]
mod rightSidebar;

#[path = "center-panels.pc.rs"]
mod centerPanels;

#[derive(Properties, PartialEq)]
struct NodeIconProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn NodeIcon(props: &NodeIconProps) -> Html {
    html! {
        <div></div>
    }
}

#[derive(Properties, PartialEq)]
pub struct ArtboardProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub style: ,
    pub title: Children,
}

#[function_component]
pub fn Artboard(props: &ArtboardProps) -> Html {
    html! {
        <div style={props.style.clone()}>
            <div class={"_Artboard-cdba43a9-26"}>
                { for props.title.iter() }
            </div>
            
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct ArtboardPreviewProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn ArtboardPreview(props: &ArtboardPreviewProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_ArtboardPreview-cdba43a9-38", scope_class_name)
        } else {
            "_ArtboardPreview-cdba43a9-38".to_string()
        }}></div>
    }
}

#[derive(Properties, PartialEq)]
pub struct CanvasProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub onMouseMove: ,
    pub onScroll: ,
    pub onWheelCapture: ,
    pub style: ,
}

#[function_component]
pub fn Canvas(props: &CanvasProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Canvas-cdba43a9-67", scope_class_name)
        } else {
            "_Canvas-cdba43a9-67".to_string()
        }} onMouseMove={props.onMouseMove.clone()} onScroll={props.onScroll.clone()} onWheelCapture={props.onWheelCapture.clone()} style={props.style.clone()} tabIndex={"0"}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct CanvasInnerProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
    pub style: ,
}

#[function_component]
pub fn CanvasInner(props: &CanvasInnerProps) -> Html {
    html! {
        <div class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_CanvasInner-cdba43a9-81", scope_class_name)
        } else {
            "_CanvasInner-cdba43a9-81".to_string()
        })} style={props.style.clone()}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct EditorPanelsProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn EditorPanels(props: &EditorPanelsProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_EditorPanels-cdba43a9-103", scope_class_name)
        } else {
            "_EditorPanels-cdba43a9-103".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct FooterBarProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn FooterBar(props: &FooterBarProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_FooterBar-cdba43a9-112", scope_class_name)
        } else {
            "_FooterBar-cdba43a9-112".to_string()
        }}></div>
    }
}

#[derive(Properties, PartialEq)]
pub struct EditorProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn Editor(props: &EditorProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Editor-cdba43a9-125", scope_class_name)
        } else {
            "_Editor-cdba43a9-125".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

