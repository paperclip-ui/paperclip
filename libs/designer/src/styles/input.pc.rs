/**
 * !! This file is AUTO GENERATED by the Paperclip Yew compiler.
 */

use yew::prelude::*;
use yew::{function_component, Children, html, Properties, Callback, MouseEvent};

#[path = "theme.pc.rs"]
mod theme;

#[path = "common.pc.rs"]
mod common;

#[derive(Properties, PartialEq)]
pub struct MultiSelectItemProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn MultiSelectItem(props: &MultiSelectItemProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_MultiSelectItem-ca714c1c-28", scope_class_name)
        } else {
            "_MultiSelectItem-ca714c1c-28".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct SelectProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn Select(props: &SelectProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Select-ca714c1c-39", scope_class_name)
        } else {
            "_Select-ca714c1c-39".to_string()
        }}>
            <div>
                { for props.children.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TextInputProps {
    pub __scope_class_name: Option<String>,
    pub value: ,
}

#[function_component]
pub fn TextInput(props: &TextInputProps) -> Html {
    html! {
        <input class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TextInput-ca714c1c-46", scope_class_name)
        } else {
            "_TextInput-ca714c1c-46".to_string()
        }} value={props.value.clone()}></input>
    }
}

#[derive(Properties, PartialEq)]
pub struct ColorInputProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn ColorInput(props: &ColorInputProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_ColorInput-root-ca714c1c-75", scope_class_name)
        } else {
            "_ColorInput-root-ca714c1c-75".to_string()
        }}>
            <div class={"_ColorInput-ca714c1c-73"}></div>
            
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct FieldsProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn Fields(props: &FieldsProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Fields-ca714c1c-87", scope_class_name)
        } else {
            "_Fields-ca714c1c-87".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct MultiSelectProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn MultiSelect(props: &MultiSelectProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_MultiSelect-ca714c1c-101", scope_class_name)
        } else {
            "_MultiSelect-ca714c1c-101".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TokenInputProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn TokenInput(props: &TokenInputProps) -> Html {
    html! {
        <span class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TokenInput-ca714c1c-113", scope_class_name)
        } else {
            "_TokenInput-ca714c1c-113".to_string()
        }}>
            { for props.children.iter() }
        </span>
    }
}

#[derive(Properties, PartialEq)]
pub struct TokenProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
}

#[function_component]
pub fn Token(props: &TokenProps) -> Html {
    html! {
        <span class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Token-ca714c1c-171", scope_class_name)
        } else {
            "_Token-ca714c1c-171".to_string()
        })}>
            { for props.children.iter() }
        </span>
    }
}

#[derive(Properties, PartialEq)]
pub struct FieldProps {
    pub __scope_class_name: Option<String>,
    pub input: Children,
    pub name: Children,
}

#[function_component]
pub fn Field(props: &FieldProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Field-ca714c1c-210", scope_class_name)
        } else {
            "_Field-ca714c1c-210".to_string()
        }}>
            <div class={"_Field-ca714c1c-195"}>
                { for props.name.iter() }
            </div>
            
            <div class={"_Field-ca714c1c-209"}>
                { for props.input.iter() }
            </div>
            
        </div>
    }
}

