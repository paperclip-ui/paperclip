/**
 * !! This file is AUTO GENERATED by the Paperclip Yew compiler.
 */

use yew::prelude::*;
use yew::{function_component, Children, html, Properties, Callback, MouseEvent};

#[path = "theme.pc.rs"]
mod theme;

#[path = "common.pc.rs"]
mod common;

#[derive(Properties, PartialEq)]
pub struct MultiSelectItemProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn MultiSelectItem(props: &MultiSelectItemProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_MultiSelectItem-ca714c1c-28", scope_class_name)
        } else {
            "_MultiSelectItem-ca714c1c-28".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct SelectProps {
    pub __scope_class_name: Option<String>,
    pub menu: Children,
    pub onClick: ,
    pub value: Children,
}

#[function_component]
pub fn Select(props: &SelectProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Select-ca714c1c-64", scope_class_name)
        } else {
            "_Select-ca714c1c-64".to_string()
        }} onClick={props.onClick.clone()} tabIndex={"-1"}>
            <div class={"_Select-input-ca714c1c-62"}>
                <div>
                    { for props.value.iter() }
                </div>
                
                <div class={"_Select-ca714c1c-61"}></div>
                
            </div>
            
            { for props.menu.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverContainerProps {
    pub __scope_class_name: Option<String>,
    pub input: Children,
    pub menu: Children,
    pub onBlur: ,
    pub onFocus: ,
}

#[function_component]
pub fn PopoverContainer(props: &PopoverContainerProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverContainer-ca714c1c-89", scope_class_name)
        } else {
            "_PopoverContainer-ca714c1c-89".to_string()
        }} onBlur={props.onBlur.clone()} onFocus={props.onFocus.clone()}>
            <div class={"_PopoverContainer-input-ca714c1c-75"}>
                { for props.input.iter() }
            </div>
            
            <div class={"_PopoverContainer-ca714c1c-88"}>
                { for props.menu.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn PopoverMenu(props: &PopoverMenuProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverMenu-ca714c1c-123", scope_class_name)
        } else {
            "_PopoverMenu-ca714c1c-123".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuHeaderProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn PopoverMenuHeader(props: &PopoverMenuHeaderProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverMenuHeader-ca714c1c-131", scope_class_name)
        } else {
            "_PopoverMenuHeader-ca714c1c-131".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuSearchProps {
    pub __scope_class_name: Option<String>,
    pub placeholder: ,
    pub value: ,
}

#[function_component]
pub fn PopoverMenuSearch(props: &PopoverMenuSearchProps) -> Html {
    html! {
        <TextInput placeholder={props.placeholder.clone()} value={props.value.clone()}></TextInput>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuItemProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
    pub onMouseDown: ,
}

#[function_component]
pub fn PopoverMenuItem(props: &PopoverMenuItemProps) -> Html {
    html! {
        <div class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverMenuItem-ca714c1c-172", scope_class_name)
        } else {
            "_PopoverMenuItem-ca714c1c-172".to_string()
        })} onMouseDown={props.onMouseDown.clone()}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TextInputProps {
    pub __scope_class_name: Option<String>,
    pub class: ,
    pub defaultValue: ,
    pub onBlur: ,
    pub onChange: ,
    pub onFocus: ,
    pub onKeyPress: ,
    pub placeholder: ,
    pub value: ,
}

#[function_component]
pub fn TextInput(props: &TextInputProps) -> Html {
    html! {
        <input class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TextInput-root-ca714c1c-204", scope_class_name)
        } else {
            "_TextInput-root-ca714c1c-204".to_string()
        })} defaultValue={props.defaultValue.clone()} onBlur={props.onBlur.clone()} onChange={props.onChange.clone()} onFocus={props.onFocus.clone()} onKeyPress={props.onKeyPress.clone()} placeholder={props.placeholder.clone()} value={props.value.clone()}></input>
    }
}

#[derive(Properties, PartialEq)]
pub struct ColorInputProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn ColorInput(props: &ColorInputProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_ColorInput-root-ca714c1c-233", scope_class_name)
        } else {
            "_ColorInput-root-ca714c1c-233".to_string()
        }}>
            <div class={"_ColorInput-ca714c1c-231"}></div>
            
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct FieldsProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn Fields(props: &FieldsProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Fields-ca714c1c-245", scope_class_name)
        } else {
            "_Fields-ca714c1c-245".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct MultiSelectProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn MultiSelect(props: &MultiSelectProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_MultiSelect-ca714c1c-259", scope_class_name)
        } else {
            "_MultiSelect-ca714c1c-259".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TokenInputProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn TokenInput(props: &TokenInputProps) -> Html {
    html! {
        <span class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TokenInput-ca714c1c-271", scope_class_name)
        } else {
            "_TokenInput-ca714c1c-271".to_string()
        }}>
            { for props.children.iter() }
        </span>
    }
}

#[derive(Properties, PartialEq)]
pub struct TokenProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
}

#[function_component]
pub fn Token(props: &TokenProps) -> Html {
    html! {
        <span class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Token-ca714c1c-329", scope_class_name)
        } else {
            "_Token-ca714c1c-329".to_string()
        })}>
            { for props.children.iter() }
        </span>
    }
}

#[derive(Properties, PartialEq)]
pub struct FieldProps {
    pub __scope_class_name: Option<String>,
    pub input: Children,
    pub name: Children,
}

#[function_component]
pub fn Field(props: &FieldProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Field-ca714c1c-368", scope_class_name)
        } else {
            "_Field-ca714c1c-368".to_string()
        }}>
            <div class={"_Field-ca714c1c-353"}>
                { for props.name.iter() }
            </div>
            
            <div class={"_Field-ca714c1c-367"}>
                { for props.input.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TokenMenuContentProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub file: Children,
    pub preview: Children,
    pub style: ,
}

#[function_component]
pub fn TokenMenuContent(props: &TokenMenuContentProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TokenMenuContent-ca714c1c-412", scope_class_name)
        } else {
            "_TokenMenuContent-ca714c1c-412".to_string()
        }} style={props.style.clone()}>
            <div class={"_TokenMenuContent-ca714c1c-406"}>
                <div class={"_TokenMenuContent-ca714c1c-399"}></div>
                
                { for props.children.iter() }
                <div class={"_TokenMenuContent-ca714c1c-405"}>
                    { for props.preview.iter() }
                </div>
                
            </div>
            
            <div class={"_TokenMenuContent-ca714c1c-411"}>
                { for props.file.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuDividerProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
pub fn PopoverMenuDivider(props: &PopoverMenuDividerProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverMenuDivider-ca714c1c-423", scope_class_name)
        } else {
            "_PopoverMenuDivider-ca714c1c-423".to_string()
        }}></div>
    }
}

#[derive(Properties, PartialEq)]
pub struct PopoverMenuSectionProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn PopoverMenuSection(props: &PopoverMenuSectionProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_PopoverMenuSection-ca714c1c-447", scope_class_name)
        } else {
            "_PopoverMenuSection-ca714c1c-447".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct ComponentPreviewProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub title: Children,
}

#[function_component]
fn ComponentPreview(props: &ComponentPreviewProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_ComponentPreview-ca714c1c-465", scope_class_name)
        } else {
            "_ComponentPreview-ca714c1c-465".to_string()
        }}>
            <h1>
                { for props.title.iter() }
            </h1>
            
            <div>
                { for props.children.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct SelectPreviewProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn SelectPreview(props: &SelectPreviewProps) -> Html {
    html! {
        <Select menu={
            <PopoverMenu>
                <PopoverMenuSection>
                    
                </PopoverMenuSection>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuSection>
                    
                </PopoverMenuSection>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} style={"--color: orange"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} style={"--color: yellow"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} style={"--color: #F60"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
            </PopoverMenu>
            
} value={
            
}></Select>
    }
}

#[derive(Properties, PartialEq)]
struct TextInputAutoSuggestProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn TextInputAutoSuggest(props: &TextInputAutoSuggestProps) -> Html {
    html! {
        <PopoverContainer input={
            <TextInput placeholder={"10px"} value={"10px"}></TextInput>
            
} menu={
            <PopoverMenu>
                <PopoverMenuSection>
                    
                </PopoverMenuSection>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem class={"preselect"}>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem class={"selected"}>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    
                </PopoverMenuItem>
                
                <PopoverMenuSection>
                    
                </PopoverMenuSection>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} preview={
                        
} style={"--color: orange"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} preview={
                        
} style={"--color: yellow"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
                <PopoverMenuItem>
                    <TokenMenuContent file={
                        
} style={"--color: #F60"}>
                        
                    </TokenMenuContent>
                    
                </PopoverMenuItem>
                
            </PopoverMenu>
            
}></PopoverContainer>
    }
}

