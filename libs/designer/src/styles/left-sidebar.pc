import "./common.pc" as common
import "./theme.pc" as theme

public component Tabs {
  render div {
    style {
      display: flex
    }
    slot children
  }
}

public component Tab {
  variant selected trigger { ".selected" }
  render div(class: class) {
    style {
      font-weight: 600
      padding: var(theme.space05)
      display: inline-block
      flex: 1
      text-align: center
      border-bottom: 1px solid var(theme.borderColor)
    }
    style variant selected {
      border-color: var(theme.backgroundSelected)

    }
    slot children
  }
}

public component LeftSidebar {
  render common.Sidebar { 
    common.SidebarPanel {
      slot children
    }
     
  }
}

public component LeftSidebarHeader {
  render common.SidebarPanelContent {
    style {
      display: flex
      justify-content: space-between
      align-items: center
      height: 56px
      font-weight: 600
    }
    div {
      style {
        display: flex
        gap: 8px
        align-items: center
      }
      div {
        style extends theme.icon {
          display: none
          -webkit-mask-image: url("./back.svg")
          --size: 1.6em
          width: 12px
          height: 1em
        }
      }
      span {
        slot title
      }
    }
    div {
      style {
        display: flex
        gap: 4px
      }
      div {
        style extends theme.icon {
          cursor: pointer
          -webkit-mask-image: url("./hamburger.svg")
          --size: 1.2em
          display: none
        }
      }
    }
  }
}


component LayerIcon {
  variant isComponent trigger { ".component" }
  variant isElement trigger { ".element" }
  variant isCompositeToken trigger { ".composite-token" }
  variant isAtomToken trigger { ".atom-token" }
  variant isSlot trigger { ".slot" }
  variant isText trigger { ".text" }
  variant isTrigger trigger { ".trigger" }
  render div root (class:class) {
    style {
      width: 12px
      position: relative

      height: 1em
    }
    div {
      style extends theme.icon {
        position: absolute
        top: 50%
        left: 50%
        transform: translate(-50%, -50%)

      }
      style variant isComponent {
        --size: 1.1em
        -webkit-mask-image: url("./component2.svg")
      }
      style variant isSlot {
        --size: 1em
        -webkit-mask-image: url("./slot3.svg")
      }
      style variant isElement {
        --size: 0.75em
        -webkit-mask-image: url("./square.svg")
      }
      style variant isCompositeToken {
        --size: 0.9em
        -webkit-mask-image: url("./group.svg")
      }
      style variant isAtomToken {
        --size: 0.8em
        -webkit-mask-image: url("./dot4.svg")
      }
      style variant isTrigger {
        --size: 1.1em
        position: relative

        -webkit-mask-image: url("./lightning.svg")
      }
      style variant isText {
        --size: 0.8em
        -webkit-mask-image: url("./text.svg")
      }
    }
  }
}

component TreeNavigationItemContent {
  render div {
    slot children
  }
}

component TreeNavigationItem {
  variant isSelected
  render div {
    style variant isSelected {
      background: var(theme.backgroundSelectedLight)
    }
    slot children
  }
}


component TreeNavigationItemHeader {
  variant isContainer trigger { ".container" }
  variant isOpen trigger { ".open" }
  variant isHovering trigger { ":hover" }
  render div root(class:class) {
    style {
      --depth: 1
      display: flex
      gap: var(theme.space02)
      padding: var(theme.space03) var(theme.space05)
      padding-left: calc(22px * var(--depth))
      justify-content: space-between

    }
    div {
      style {
        position: relative
        display: flex
        gap: var(theme.space03)
        align-items: center
      }
      div {
        style extends theme.icon {
          -webkit-mask-image: url("./chevron2.svg")
          opacity: 0
          color: white
          --size: 14px
          position: absolute
          left: -18px

        }
        style variant isContainer {
          opacity: 0.3
        }
        style variant isOpen {
          transform: rotate(90deg)
        }
      }
      slot children
    }
    div {
      style extends theme.easeIn {
        opacity: 0
      }
      style variant isHovering {
        opacity: 1
      }
      slot controls
    }
  }
}

component FileNavigatorItemHeader {
  variant isSlot trigger { ".slot" }
  variant isComponent trigger { ".component" }
  variant isElement trigger { ".element" }
  variant isCompositeToken trigger { ".composite-token" }
  variant isShadow trigger { ".shadow" }
  variant isAtomToken trigger { ".atom-token" }
  variant isTrigger trigger { ".trigger" }
  variant isText trigger { ".text" }
  render TreeNavigationItemHeader container(class: class) {
    override root {
      style {
        --depth: 1
        --regular-layer: var(theme.blue01)

      }
      style variant isComponent {
        --icon-color: var(theme.componentColor)
      }
      style variant isElement {
        --icon-color:  var(--regular-layer)
      }
      style variant isCompositeToken {
        --icon-color: rgb(114, 247, 134)
      }
      style variant isAtomToken {
        --icon-color: rgb(114, 247, 134)
      }
      style variant isTrigger {
        --icon-color: rgb(114, 247, 134)
      }
      style variant isSlot {
        --icon-color:  var(--regular-layer)
      }
      style variant isText {
        --icon-color:  var(--regular-layer)
      }
      style variant isShadow {
        --icon-color: var(theme.componentColor)
      }
    }
    LayerIcon(class:class) {
      override root {
        style {
          color: var(--icon-color)
        }
      }
    }
    slot children
    insert controls {
      slot controls
    }
  }
}

component Tooltip {
  variant isHovering trigger { ":hover" }
  render div {
    style {
      position: relative
    }
    slot children
    div {
      style extends theme.easeIn {
        opacity: 0
        position: absolute
        left: 50%
        top: calc(100% + var(theme.space03))
        transform: translateX(-50%)
        background: var(theme.borderColor)
        border: 1px solid var(theme.borderColor)
        border-radius: var(theme.rounded)
        padding: var(theme.space01) var(theme.space03)
        white-space: nowrap
      }
      style variant isHovering {
        opacity: 1
      }
      div {
        style {
          position: relative
        }
        div {
          style extends theme.icon {
            --size: 1.5em
            color: var(theme.borderColor)
            position: fixed
            top: calc(-50% + 2px)
            transform: rotate(-90deg) translateY(-50%) translateX(50%)
            left: 50%
            -webkit-mask-image: url("./chevron2.svg")
          }
        }
        text "open shadow instances"
      }
    }
  }
}

component Layers {
  render div {
    style {
      padding: var(theme.space03) 0px
    }
    TreeNavigationItem {
      FileNavigatorItemHeader(class: "component container open") {  
        text "Some instance"
        insert controls {
          Tooltip(title: "display shadow") {
            div {
              style extends theme.icon {
                cursor: pointer
                opacity: 0.5
                -webkit-mask-image: url("./shadow2.svg")
              }
            }
          }
        }
      }
      TreeNavigationItemContent {
        TreeNavigationItem {
          FileNavigatorItemHeader(class: "shadow element container open") {
            override container.root {
              style {
                --depth: 2
              }
            }
            text "container"
          }
        }
        TreeNavigationItem {
          FileNavigatorItemHeader(class: "slot container open") {
            override container.root {
              style {
                --depth: 2
              }
            }
            text "label"
          }
          TreeNavigationItemContent {
            TreeNavigationItem {
              FileNavigatorItemHeader(class: "text") {
                override container.root {
                  style {
                    --depth: 3
                  }
                }
                text "some label"
              }
              FileNavigatorItemHeader(class: "element") {
                override container.root {
                  style {
                    --depth: 3
                  }
                }
                text "some element"
                text "div" {
                  style {
                    opacity: 0.3
                  }
                }
              }
            }
          }
        }
        TreeNavigationItem(class: "selected") {
          FileNavigatorItemHeader(class: "slot container open") {
            override container.root {
              style {
                --depth: 2
              }
            }
            text "description"
          }
          TreeNavigationItemContent {
            TreeNavigationItem {
              FileNavigatorItemHeader(class: "text") {
                override container.root {
                  style {
                    --depth: 3
                  }
                }
                text "some long description"
              }
            }
          }
        }
      }
    }
  }
}


component Tokens {
  render div {
    style {
      padding: var(theme.space04) 0px
    }
    TreeNavigationItem {
      FileNavigatorItemHeader(class: "composite-token open") {   
        override container.root {
          style {
            --depth: 1
          }
        }
        text "Font Regular"
      }
      FileNavigatorItemHeader(class: "atom-token open") {   
        override container.root {
          style {
            --depth: 1
          }
        }
        text "red01"
      }
      FileNavigatorItemHeader(class: "atom-token open") {   
        override container.root {
          style {
            --depth: 1
          }
        }
        text "red02"
      }
      FileNavigatorItemHeader(class: "trigger open") {    
        override container.root {
          style {
            --depth: 1
          }
        }    
        text "mobile"
      }
    }
  }
}



public component LeftSidebarPreview {
  render LeftSidebar {
      LeftSidebarHeader {
        insert title {
          text "TodoList.pc"
        }
      }
      common.SidebarSection {
        common.SidebarPanelHeader {
          text "Layers"
          div {
            style extends theme.icon {
              -webkit-mask-image: url("./plus.svg")
            }
          }
        }
        Layers
      }
      common.SidebarSection {
        override root {
          style {
            display: none
          }
        }
        common.SidebarPanelHeader {
          text "Design Tokens"
          div {
            style extends theme.icon {
              -webkit-mask-image: url("./plus.svg")
            }
          }
        }
        Tokens
      }
  }
}