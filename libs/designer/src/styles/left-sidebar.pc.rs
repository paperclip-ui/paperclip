/**
 * !! This file is AUTO GENERATED by the Paperclip Yew compiler.
 */

use yew::prelude::*;
use yew::{function_component, Children, html, Properties, Callback, MouseEvent};

#[path = "common.pc.rs"]
mod common;

#[path = "theme.pc.rs"]
mod theme;

#[derive(Properties, PartialEq)]
pub struct TabsProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
pub fn Tabs(props: &TabsProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Tabs-1e0c5ead-7", scope_class_name)
        } else {
            "_Tabs-1e0c5ead-7".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct TabProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
}

#[function_component]
pub fn Tab(props: &TabProps) -> Html {
    html! {
        <div class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Tab-1e0c5ead-38", scope_class_name)
        } else {
            "_Tab-1e0c5ead-38".to_string()
        })}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
pub struct LeftSidebarProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
pub fn LeftSidebar(props: &LeftSidebarProps) -> Html {
    html! {
        <common::Sidebar>
            <common::SidebarPanel>
                <LeftSidebarHeader></LeftSidebarHeader>
                
                <common::SidebarSection>
                    <common::SidebarPanelHeader>
                        
                        <div class={"_LeftSidebar-1e0c5ead-48"}></div>
                        
                    </common::SidebarPanelHeader>
                    
                    <Layers></Layers>
                    
                </common::SidebarSection>
                
                <common::SidebarSection>
                    <common::SidebarPanelHeader>
                        
                        <div class={"_LeftSidebar-1e0c5ead-58"}></div>
                        
                    </common::SidebarPanelHeader>
                    
                    <Tokens></Tokens>
                    
                </common::SidebarSection>
                
            </common::SidebarPanel>
            
        </common::Sidebar>
    }
}

#[derive(Properties, PartialEq)]
struct LeftSidebarHeaderProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn LeftSidebarHeader(props: &LeftSidebarHeaderProps) -> Html {
    html! {
        <common::SidebarPanelContent __scope_class_name={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_LeftSidebarHeader-1e0c5ead-119", scope_class_name)
        } else {
            "_LeftSidebarHeader-1e0c5ead-119".to_string()
        }}>
            <div class={"_LeftSidebarHeader-1e0c5ead-100"}>
                <div class={"_LeftSidebarHeader-1e0c5ead-97"}></div>
                
                <span>
                    
                </span>
                
            </div>
            
            <div class={"_LeftSidebarHeader-1e0c5ead-118"}>
                <div class={"_LeftSidebarHeader-1e0c5ead-117"}></div>
                
            </div>
            
        </common::SidebarPanelContent>
    }
}

#[derive(Properties, PartialEq)]
struct LayerIconProps {
    pub __scope_class_name: Option<String>,
    pub class: String,
}

#[function_component]
fn LayerIcon(props: &LayerIconProps) -> Html {
    html! {
        <div class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_LayerIcon-root-1e0c5ead-210", scope_class_name)
        } else {
            "_LayerIcon-root-1e0c5ead-210".to_string()
        })}>
            <div class={"_LayerIcon-1e0c5ead-209"}></div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct TreeNavigationItemContentProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
fn TreeNavigationItemContent(props: &TreeNavigationItemContentProps) -> Html {
    html! {
        <div>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct TreeNavigationItemProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
fn TreeNavigationItem(props: &TreeNavigationItemProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TreeNavigationItem-1e0c5ead-224", scope_class_name)
        } else {
            "_TreeNavigationItem-1e0c5ead-224".to_string()
        }}>
            { for props.children.iter() }
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct TreeNavigationItemHeaderProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
    pub controls: Children,
}

#[function_component]
fn TreeNavigationItemHeader(props: &TreeNavigationItemHeaderProps) -> Html {
    html! {
        <div class={format!("{} {}", props.class.clone(), if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_TreeNavigationItemHeader-root-1e0c5ead-304", scope_class_name)
        } else {
            "_TreeNavigationItemHeader-root-1e0c5ead-304".to_string()
        })}>
            <div class={"_TreeNavigationItemHeader-1e0c5ead-293"}>
                <div class={"_TreeNavigationItemHeader-1e0c5ead-291"}></div>
                
                { for props.children.iter() }
            </div>
            
            <div class={"_TreeNavigationItemHeader-1e0c5ead-303"}>
                { for props.controls.iter() }
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct FileNavigatorItemHeaderProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
    pub class: String,
}

#[function_component]
fn FileNavigatorItemHeader(props: &FileNavigatorItemHeaderProps) -> Html {
    html! {
        <TreeNavigationItemHeader __scope_class_name={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_FileNavigatorItemHeader-container-1e0c5ead-392", scope_class_name)
        } else {
            "_FileNavigatorItemHeader-container-1e0c5ead-392".to_string()
        }} class={props.class.clone()} controls={
            { for props.controls.iter() }
}>
            <LayerIcon class={props.class.clone()}></LayerIcon>
            
            { for props.children.iter() }
        </TreeNavigationItemHeader>
    }
}

#[derive(Properties, PartialEq)]
struct TooltipProps {
    pub __scope_class_name: Option<String>,
    #[prop_or_default]
    pub children: Children,
}

#[function_component]
fn Tooltip(props: &TooltipProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Tooltip-1e0c5ead-476", scope_class_name)
        } else {
            "_Tooltip-1e0c5ead-476".to_string()
        }}>
            { for props.children.iter() }
            <div class={"_Tooltip-1e0c5ead-475"}>
                <div class={"_Tooltip-1e0c5ead-474"}>
                    <div class={"_Tooltip-1e0c5ead-472"}></div>
                    
                    
                </div>
                
            </div>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct LayersProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn Layers(props: &LayersProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Layers-1e0c5ead-566", scope_class_name)
        } else {
            "_Layers-1e0c5ead-566".to_string()
        }}>
            <TreeNavigationItem>
                <FileNavigatorItemHeader class={"component container open"} controls={
                    <Tooltip title={"display shadow"}>
                        <div class={"_Layers-1e0c5ead-499"}></div>
                        
                    </Tooltip>
                    
}>
                    
                </FileNavigatorItemHeader>
                
                <TreeNavigationItemContent>
                    <TreeNavigationItem>
                        <FileNavigatorItemHeader class={"shadow element container open"}>
                            
                        </FileNavigatorItemHeader>
                        
                    </TreeNavigationItem>
                    
                    <TreeNavigationItem>
                        <FileNavigatorItemHeader class={"slot container open"}>
                            
                        </FileNavigatorItemHeader>
                        
                        <TreeNavigationItemContent>
                            <TreeNavigationItem>
                                <FileNavigatorItemHeader class={"text"}>
                                    
                                </FileNavigatorItemHeader>
                                
                                <FileNavigatorItemHeader class={"element"}>
                                    
                                    
                                </FileNavigatorItemHeader>
                                
                            </TreeNavigationItem>
                            
                        </TreeNavigationItemContent>
                        
                    </TreeNavigationItem>
                    
                    <TreeNavigationItem class={"selected"}>
                        <FileNavigatorItemHeader class={"slot container open"}>
                            
                        </FileNavigatorItemHeader>
                        
                        <TreeNavigationItemContent>
                            <TreeNavigationItem>
                                <FileNavigatorItemHeader class={"text"}>
                                    
                                </FileNavigatorItemHeader>
                                
                            </TreeNavigationItem>
                            
                        </TreeNavigationItemContent>
                        
                    </TreeNavigationItem>
                    
                </TreeNavigationItemContent>
                
            </TreeNavigationItem>
            
        </div>
    }
}

#[derive(Properties, PartialEq)]
struct TokensProps {
    pub __scope_class_name: Option<String>,
}

#[function_component]
fn Tokens(props: &TokensProps) -> Html {
    html! {
        <div class={if let Some(scope_class_name) = &props.__scope_class_name {
            format!("{} {}", "_Tokens-1e0c5ead-608", scope_class_name)
        } else {
            "_Tokens-1e0c5ead-608".to_string()
        }}>
            <TreeNavigationItem>
                <FileNavigatorItemHeader class={"composite-token open"}>
                    
                </FileNavigatorItemHeader>
                
                <FileNavigatorItemHeader class={"atom-token open"}>
                    
                </FileNavigatorItemHeader>
                
                <FileNavigatorItemHeader class={"atom-token open"}>
                    
                </FileNavigatorItemHeader>
                
                <FileNavigatorItemHeader class={"trigger open"}>
                    
                </FileNavigatorItemHeader>
                
            </TreeNavigationItem>
            
        </div>
    }
}

