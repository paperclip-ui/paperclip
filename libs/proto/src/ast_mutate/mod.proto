syntax = "proto3";
import "ast/base.proto";
import "ast/css.proto";
import "ast/docco.proto";
import "ast/pc.proto";

package ast_mutate;

message Mutation {
  oneof inner {

    // Node specific
    AppendChild append_child = 1;
    PrependChild prepend_child = 23;
    DeleteChild delete_child = 2;
    InsertChild insert_child = 3;
    ConvertToComponent convert_to_component = 14;
    WrapInElement wrap_in_element = 19;
    ConvertToSlot convert_to_slot = 15;
    SetTagName set_tag_name = 20;
    MoveNode move_node = 18;

    // Element
    SetElementParameter set_element_parameter = 4;
    SetFrameBounds set_frame_bounds = 6;
    InsertFrame insert_frame = 7;

    // Text
    SetTextNodeValue set_text_node_value = 8;

    // Style
    SetStyleDeclarations set_style_declarations = 5;
    SetStyleDeclarationValue set_style_declaration_value = 24;
    DeleteStyleDeclarations delete_style_declarations = 10;
    SetStyleMixins set_style_mixins = 22;

    // General
    DeleteExpression delete_expression = 11;
    SetId set_id = 16;
    PasteExpression paste_expression = 21;

    // Instance
    ToggleInstanceVariant toggle_instance_variant = 13;

    // Component
    UpdateVariant update_variant = 12;

    // Instance
    AppendInsert append_insert = 17;
  }
}

message WrapInElement {
  string target_id = 1;
}

message SetTagName {
  string tag_name = 1;
  string element_id = 2;
  optional string tag_file_path = 3;
}

enum NodePosition {
  BEFORE = 0;
  AFTER = 1;
  INSIDE = 2;
}

message MoveNode {
  NodePosition position = 1;
  string target_id = 2;
  string node_id = 3;
}

// result after mutation 
message MutationResult {
  oneof inner {
    ExpressionInserted expression_inserted = 1;
    ExpressionUpdated expression_updated = 2;
    ExpressionDeleted expression_deleted = 3;
  }
}

message ToggleInstanceVariant {
  string instance_id = 1;
  string variant_id = 2;
  repeated string combo_variant_ids = 3;
}

message UpdateVariant {
  string component_id = 1;
  optional string variant_id = 2;
  string name = 3;
  repeated UpdateVariantTrigger triggers = 4;
}

message UpdateVariantTrigger {
  oneof inner {
    string str = 1;
    bool bool = 2;
    TriggerReference reference = 3;
  }
}

message TriggerReference {
  string source_path = 1;
  string name = 2;
}

message ExpressionInserted {
  string id = 1;
}

message ExpressionDeleted {
  string id = 1;
}

message ExpressionUpdated {
  string id = 1;
}

message AppendChild {
  string parent_id = 1;
  string child_source = 2;
}

message PrependChild {
  string parent_id = 1;
  string child_source = 2;
}

message DeleteExpression {
  string expression_id = 1;
}

message ConvertToComponent {
  string expression_id = 1;
  optional string name = 2;
}

message SetId {
  string expression_id = 1;
  string value = 2;
}

message ConvertToSlot {
  string expression_id = 1;
}

message DeleteChild {
  string node_id = 1;
}

message SetFrameBounds {
  string frame_id = 1;
  Bounds bounds = 2;
}

message Bounds {
  float x = 1;
  float y = 2;
  float width = 3;
  float height = 4;
}

message PasteExpression {
  string target_expression_id = 1;
  oneof item {
    ast.pc.TextNode text_node = 2;
    ast.pc.Element element = 3;
    ast.pc.Component component = 4;
  }
}

message InsertChild {
  string before_id = 1;
  string child_source = 2;
}

message SetElementParameter {
  string target_id = 1;
  optional string parameter_id = 2;
  string parameter_name = 3;
  string parameter_value = 4;
}

message AppendInsert {
  string instance_id = 1;
  string slot_name = 2;
  string child_source = 3;
}


message InsertFrame {
  string document_id = 1;
  string node_source = 2;
  Bounds bounds = 3;
  map<string, string> imports = 4;
}

message SetTextNodeValue {
  string text_node_id = 1;
  string value = 2;
}

message SetStyleDeclarationValue {
  map<string, string> imports = 3;
  string target_id = 1;
  string value = 2;

}

message SetStyleDeclaration {
  map<string, string> imports = 3;
  string name = 1;
  string value = 2;
}

message SetStyleDeclarations {
  string expression_id = 1;
  repeated string variant_ids = 2;
  repeated SetStyleDeclaration declarations = 3;
}

message SetStyleMixins {
  string target_expr_id = 1;
  repeated string mixin_ids = 2;
  repeated string variant_ids = 3;
}

message DeleteStyleDeclarations {
  string expression_id = 1;
  repeated string declaration_names = 2;
}