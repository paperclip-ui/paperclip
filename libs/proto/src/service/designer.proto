syntax = "proto3";
import "ast_mutate/mod.proto";
import "ast/graph.proto";
import "ast/base.proto";
import "language_service/pc.proto";
import "virt/module.proto";

package service.designer;

service Designer {
  rpc OpenFile(FileRequest) returns (FileResponse);
  rpc GetGraph(Empty) returns (stream ast.graph.Graph);
  rpc GetProjectInfo(Empty) returns (ProjectInfo);
  rpc SearchResources(SearchResourcesRequest) returns (SearchResourcesResponse);
  rpc OpenFileInNavigator(OpenFileInNavigatorRequest) returns (Empty);
  rpc OnEvent(Empty) returns (stream DesignServerEvent);
  rpc UpdateFile(UpdateFileRequest) returns (Empty);
  rpc ReadDirectory(ReadDirectoryRequest) returns (ReadDirectoryResponse);
  rpc DeleteFile(DeleteFileRequest) returns (Empty);
  rpc MoveFile(MoveFileRequest) returns (Empty);
  rpc OpenCodeEditor(OpenCodeEditorRequest) returns (Empty);
  rpc SaveFile(SaveFileRequest) returns (Empty);
  rpc CreateFile(CreateFileRequest) returns (Empty);
  rpc CreateDesignFile(CreateDesignFileRequest) returns (CreateDesignFileResponse);
  rpc GetResourceFiles(Empty) returns (stream ResourceFiles);
  rpc ApplyMutations(ApplyMutationsRequest) returns (ApplyMutationsResult);
  rpc GetDocumentInfo(FileRequest) returns (language_service.pc.DocumentInfo);
  rpc Undo(Empty) returns (Empty);
  rpc Redo(Empty) returns (Empty);
  rpc Save(Empty) returns (Empty);
}

message ProjectInfo {
    repeated string experimental_capabilities = 1;
    string src_directory = 2;
}

message SaveFileRequest {
    string path = 1;
    bytes content = 2;
}

message SearchResourcesRequest {
  string query = 1;
}

message OpenFileInNavigatorRequest {
  string file_path = 1;
}

message SearchResourcesResponse {
  string root_dir = 1;
  repeated Resource items = 2;
}

enum ResourceKind {
  Component = 0;
  Token = 1;
  StyleMixin = 2;
  Trigger = 3;

  // GRPC doesn't like if there's another enum with this name so fuck it,
  // we give it the name we kind-of want.
  File2 = 4;
}

message Resource {
    string parent_path = 1;
    string name = 2;
    string id = 3;
    ResourceKind kind = 4;
}

message CreateFileRequest {
  string path = 1;
  FSItemKind kind = 2;
}

message OpenCodeEditorRequest {
  string path = 1;
  ast.base.Range range = 2;
}


message ReadDirectoryRequest {
  string path = 1;
}
message MoveFileRequest {
  string from_path = 1;
  string to_path = 2;
}

message DeleteFileRequest {
  string path = 1;
}

message ReadDirectoryResponse {
  string path = 1;
  repeated FSItem items = 2;
}

enum FSItemKind {
  Directory = 0;
  File = 1;
}

message FSItem {
  FSItemKind kind = 1;
  string path = 2;
}


message Empty {
}

message ResourceFiles {
  repeated string file_paths = 1;
}
message ApplyMutationsRequest {
  repeated ast_mutate.Mutation mutations = 1;
}

message ApplyMutationsResult {
  repeated ast_mutate.MutationResult changes = 1;
}

message CreateDesignFileRequest {
  string name = 1;
  optional string parent_dir = 2;
}

message CreateDesignFileResponse {
  string file_path = 1;
}

message FileRequest {
  string path = 1;
}

message UpdateFileRequest {
  string path = 1;
  bytes content = 2;
}

message FileResponse {

  // Raw data
  bytes raw_content = 1;

  oneof data {
    virt.module.PCModule paperclip = 2;
  }
}

message DesignServerEvent {
  oneof inner {
    FileChanged file_changed = 1;
    ModulesEvaluated modules_evaluated = 2;
    ScreenshotCaptured screenshot_captured = 3;
  }
}

enum FileChangedKind {
    CONTENT = 0;
    DELETED = 1;
    CREATED = 2;
}

message FileChanged {
  FileChangedKind kind = 1;
  string path = 2;
  optional bytes content = 3;
}

message ModulesEvaluated {
  repeated string file_paths = 1;
}

message ScreenshotCaptured {
  string expr_id = 1;
}
