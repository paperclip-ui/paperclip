# # [PackageDev] target_format: json, ext: tmLanguage.json
# # https://github.com/microsoft/vscode/tree/main/extensions/javascript/syntaxes/JavaScriptReact.tmLanguage.json
# # https://github.com/microsoft/vscode/blob/master/extensions/html/syntaxes/html.tmLanguage.json
# # https://github.com/microsoft/TypeScript-TmLanguage/blob/master/TypeScriptReact.YAML-tmLanguage
# # https://macromates.com/manual/en/language_grammars
# # https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#theming

# name: Paperclip Lang
# scopeName: text.core.paperclip-core
# fileTypes: []
# uuid: 3e3ce414-c385-42ea-a2ba-451a37ca6fd1
# patterns:
#   - include: "#document"
# variables:
#   string: (\".*?\"|\'.*?\')
#   reference: (\w+)
#   newInstanceName: ({{reference}}(\.{{reference}})*)
#   newInstanceArgs: ({{string}}|{{parameters}})
#   newInstanceId: (\w+)
#   lookAheadOpenBraces: (?=[^\{]*\{)
#   newInstance: ({{newInstanceName}}{{newInstanceId}}?\s+({{newInstanceArgs}}))
#   lookAheadNewInstanceArgs: (?={{newInstanceArgs}})
#   parameter: \s*(\w+)\s*:\s*(\w+)\s*
#   parametersInterior: ({{parameter}}(,{{parameter}})*)?
#   parameters: ((\(){{parametersInterior}}(\)))
#   lookAheadParameters: (?=parameters)
# repository:
#   document:
#     patterns:
#       - include: "#import"
#       - include: "#public"
#       - include: "#trigger"
#       - include: "#component"
#       - include: "#style"
#       - include: "#node"
#       - include: "#token"
#   import:
#     patterns:
#       - match: (import)\s+{{string}}\s(as)\s(\w+)
#         captures:
#           "1": { name: keyword.control.import }
#           "2": { name: string.double }
#           "3": { name: storage.modifier }
#           "4": { name: variable.other }
#   trigger:
#     patterns:
#       - begin: (trigger)\s+(\w+)\s*\{
#         end: (\})
#         beginCaptures:
#           "1": { name: storage.type.var }
#           "2": { name: variable.other }
#           "3": { name: string.double }
#         patterns:
#           - include: "#string"
#   public:
#     patterns:
#       - match: (public)
#         captures:
#           "1": { name: storage.modifier }
#   component:
#     patterns:
#       - begin: (component)\s(\w+)\s*(\{)
#         end: (\})
#         beginCaptures:
#           "1": { name: storage.type.class }
#           "2": { name: entity.name.type.class }
#         patterns:
#           - include: "#variant"
#           - include: "#render"
#   render:
#     patterns:
#       - match: (render)
#         captures:
#           "0": { name: storage.modifier }
#       - include: "#node"
#   node:
#     patterns:
#       - include: "#slot"
#       - include: "#insert"
#       - include: "#instance"

#   string:
#     patterns:
#       - include: "#string-single"
#       - include: "#string-double"

#   string-single:
#     patterns:
#       - name: string.quoted.double
#         begin: "'"
#         end: "'"

#   string-double:
#     patterns:
#       - name: string.quoted.double
#         begin: "\""
#         end: "\""
#   slot:
#     patterns:
#       - begin: (slot)\s+(\w+)\s*{
#         end: "}"
#         beginCaptures:
#           "1": { name: keyword.control }
#           "2": { name: support.variable }
#         patterns:
#           - include: "#node-child"
#       - match: (slot)\s+(\w+)
#         captures:
#           "1": { name: keyword.control }
#           "2": { name: support.variable }
#   insert:
#     patterns:
#       - begin: (insert)\s+(\w+)\s*\{
#         end: (})
#         beginCaptures:
#           "1": { name: keyword.control }
#           "2": { name: support.variable }
#         patterns:
#           - include: "#node"

#   variant:
#     patterns:
#       - begin: (variant)\s+(\w+)\s+(trigger)\s+(\{)
#         end: (})
#         beginCaptures:
#           "1": { name: support.type }
#           "2": { name: variable.other.property }
#           "3": { name: storage.modifier }
#         patterns:
#           - include: "#reference"
#       - match: (variant)\s+(\w+)
#         captures:
#           "1": { name: keyword.control }
#           "2": { name: support.variable }
#   reference:
#     patterns:
#       - match: (\w+)
#         captures:
#           "0": { name: variable.other }
#   instance:
#     patterns:
#       - begin: ({{newInstanceName}}){{lookAheadOpenBraces}}
#         end: (\})
#         beginCaptures:
#           "1": { name: storage.modifier }
#         patterns:
#           - begin: (?=[^\{])
#             end: "{"
#             patterns:
#               - include: "#instance-interior"
#           - include: "#node-children"
#   instance-interior:
#     patterns:
#       - match: (\s*)({{newInstanceId}})(\s*)
#         name: support.type
#   parameters:
#     patterns:
#       - begin: "("
#         end: ")"
#         name: support.type
#   parameter:
#     patterns:
#       - match: ({{parameter}})(?=\))
#         captures:
#           "0": { name: storage.modifier }

#   style:
#     patterns:
#       - begin: (style)
#         end: (?=\{)
#         beginCaptures:
#           "1": { name: storage.type.var }
#         patterns:
#           - match: (variant)\s+(\w+)(\s*\+\s*(\w+))?
#             captures:
#               "1": { name: storage.modifier }
#               "2": { name: support.variable }
#               "4": { name: support.variable }
#           - match: (extends)\s+(\w+)(\s*\,\s*(\w+))?
#             captures:
#               "1": { name: storage.modifier }
#               "2": { name: support.variable }
#               "4": { name: support.variable }
#       - begin: "{"
#         end: "}"
#         patterns:
#           - include: "#style-declaration"
#   node-children:
#     patterns:
#       - begin: "{"
#         beginCaptures:
#           "0": { name: storage.modifier }
#         end: "}"
#         endCaptures:
#           "0": { name: storage.modifier }
#         patterns:
#           - include: "#node-child"
#   node-child:
#     patterns:
#       - include: "#style"
#       - include: "#node"
