import "../../../../atoms/view.pc" as imp0
import "../../../../inputs/button/view.pc" as imp1


/**
 * @bounds(left: 0, top: 0, right: 281, bottom: 400)
 */
public component TextPreview {
  render div {
    style {
      display: flex
      flex-direction: column
    }
    div banner {
      style {
        box-sizing: border-box
        display: flex
        align-items: center
        justify-content: space-between
        padding-left: 8px
        padding-top: 8px
        padding-right: 8px
        padding-bottom: 8px
        background: rgba(88, 185, 255, 1)
        flex-shrink: 0
      }
      text text2 "You're viewing this file in read-only mode." {
        style {
          include imp0.baseFont
          color: rgba(255, 255, 255, 1)
          font-weight: 600
          user-select: none
          cursor: default
        }
      }
      div cta {
        style {
          box-sizing: border-box
          display: inline-block
        }
        imp1.Button openTextEditorButton {
          style {
            background: rgba(255, 255, 255, 1)
            white-space: nowrap
          }
          override text1 "Open in Text Editor" {
            style {
              font-size: 10px
              color: rgba(88, 185, 255, 1)
              font-weight: 600
            }
          }
        }
      }
    }
    div content {
      style {
        box-sizing: border-box
        display: block
        position: relative
        height: 0
        flex-grow: 1
        padding-left: 8px
        padding-top: 8px
        padding-right: 8px
        padding-bottom: 8px
        word-break: break-word
      }
      div inner {
        style {
          box-sizing: border-box
          display: block
          height: 100%
          width: 100%
          overflow: scroll
        }
        text text1 "import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";
export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};

import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";

export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};
import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";

export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};
import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";

export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};
import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";

export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};
import \"./index.scss\";
import * as React from \"react\";
import { Dispatch } from \"redux\";
import { FileCacheItem, getFileCacheItemDataUrl } from \"fsbox\";

export type TextEditorProps = {
  fileCacheItem: FileCacheItem;
  dispatch: Dispatch<any>;
};

export class TextEditorWindow extends React.PureComponent<
TextEditorProps
> {
  render() {
    const { fileCacheItem } = this.props;
    return (
      <div className=\"m-text-editor\">
        <div dangerouslySetInnerHTML={{__html: fileCacheItem && formatText(fileCacheItem.content.toString(\"utf8\"))}}>
        </div>
      </div>
    );
  }
}


const formatText = (text: string) => {
  return text.replace(/\n/g, `<br>`).replace(/\s/g, `&nbsp;&nbsp;`).replace(/\t/g, `&nbsp;&nbsp;&nbsp;&nbsp;`)
};"
      }
    }
  }
}

